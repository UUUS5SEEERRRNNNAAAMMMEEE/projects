1.
#include <iostream>
#include <limits>

int main() {
	const int ROWS = 3;
	const int COLS = 4;
	int a[ROWS][COLS] = {
		{ 7, -3, 15, 0},
		{ 22, 11, -8, 30},
		{ -1, 5, 19, -6}
	};
	int mn =
		std::numeric_limits<int>::max();
	int mx =
		std::numeric_limits<int>::min();
	for (int i = 0; i < ROWS; ++i) {
		for (int j = 0; j < COLS; ++j) {
			if (a[i][j] < mn) {
				mn = a[i][j];
			}
			if (a[i][j] > mx) {
				mx = a[i][j];
			}
		}
	}
	std::cout << "min: " << mn << std::endl;
	std::cout << "max: " << mx << std::endl;
	return 0;
}
2.
#include <iostream>
#include <limits>

int main() {
	const int ROWS = 3;
	const int COLS = 4;
	const int TOTAL = ROWS * COLS;
	int a[ROWS][COLS] = {
		{ 7, -3, 15, 0},
		{ 22, 11, -8, 30},
		{ -1, 5, 19, -6}
	};
	int k;
	std::cout << "write k: ";
	std::cin >> k;
	k = (k % TOTAL + TOTAL) % TOTAL;
	int b[ROWS][COLS];
	for (int i = 0; i < TOTAL; ++i) {
		int src = (i + k) % TOTAL;
		b[i / COLS][i % COLS] = a[src / COLS][src % COLS];
	}
	for (int i = 0; i < TOTAL; ++i) {
		a[i / COLS][i % COLS] = b[i / COLS][i % COLS];
	}
	std::cout << "array after sdvig to " << k << " positions to left\n";
	for (int i = 0; i < ROWS; ++i) {
		for (int j = 0; j < COLS; ++j) {
			std::cout << a[i][j] << "\t";
		}
		std::cout << "\n";
	}
	return 0;
}
2.1
#include <iostream>
#include <limits>

int main() {
	const int ROWS = 3;
	const int COLS = 4;
	const int TOTAL = ROWS * COLS;
	int a[ROWS][COLS] = {
		{ 7, -3, 15, 0},
		{ 22, 11, -8, 30},
		{ -1, 5, 19, -6}
	};
	int k;
	std::cout << "write k: ";
	std::cin >> k;
	k = (k % TOTAL + TOTAL) % TOTAL;
	int b[ROWS][COLS];
	for (int i = 0; i < TOTAL; ++i) {
		int src = (i - k + TOTAL) % TOTAL;
		b[i / COLS][i % COLS] = a[src / COLS][src % COLS];
	}
	for (int i = 0; i < TOTAL; ++i) {
		a[i / COLS][i % COLS] = b[i / COLS][i % COLS];
	}
	std::cout << "array after sdvig to " << k << " positions to left\n";
	for (int i = 0; i < ROWS; ++i) {
		for (int j = 0; j < COLS; ++j) {
			std::cout << a[i][j] << "\t";
		}
		std::cout << "\n";
	}
	return 0;
}
3.
#include <iostream>
#include <cstdlib>

int main() {
	const int rows = 5;
	const int cols = 6;
	int arr[rows][cols];
	for (int i = 0; i < rows; ++i) {
		for (int j = 0; j < cols; ++j) {
			arr[i][j] = std::rand() % 100;
		}
	}
	std::cout << "ishodniu massiv: " << std::endl;
	for (int i = 0; i < rows; ++i) {
		for (int j = 0; j < cols; ++j) {
			std::cout << arr[i][j] << '\t';
		}
		std::cout << std::endl;
	}
	int total = rows * cols;
	for (int a = 0; a < total - 1; ++a) {
		for (int b = 0; b < total - a - 1; ++b) {
			int i1 = b / cols;
			int j1 = b % cols;
			int i2 = (b + 1) / cols;
			int j2 = (b + 1) % cols;
			if (arr[i1][j1] > arr[i2][j2]) {
				int tmp = arr[i1][j1];
				arr[i1][j1] = arr[i2][j2];
				arr[i2][j2] = tmp;
			}
		}
	}
	std::cout << "otsortirovaniy massiv: " << std::endl;
	for (int i = 0; i < rows; ++i) {
		for (int j = 0; j < cols; ++j) {
			std::cout << arr[i][j] << '\t';
		}
		std::cout << std::endl;
	}
	return 0;
}
4.
#include <iostream>
#include <cstdlib>

int main() {
	const int ROWS = 5;
	const int COLS = 5;
	const int N = ROWS * COLS;
	int flat[N];
	for (int i = 0; i < N; ++i) {
		flat[i] = i + 1;
	}
	srand(1);
	for (int i = N - 1; i > 0; --i) {
		int j = rand() % (i + 1);
		int tmp = flat[i];
		flat[i] = flat[j];
		flat[j] = tmp;
	}
	int array[ROWS][COLS];
	int idx = 0;
	std::cout << "dvumerniy massiv" << ROWS << "x" << COLS << "\n";
	for (int r = 0; r < ROWS; ++r) {
		for (int c = 0; c < COLS; ++c) {
			array[r][c] = flat[idx++];
			std::cout << array[r][c] << '\t';
		}
		std::cout << '\n';
	}
	return 0;
}
5.
#include <iostream>
#include <cstdlib>
using namespace std;

int main() {
	const int ROWS = 4;
	const int COLS = 5;
	const int MAX_VAL = 15;
	int arr[ROWS][COLS];
	for (int i = 0; i < ROWS; ++i) {
		for (int j = 0; j < COLS; ++j) {
			arr[i][j] = rand() % (MAX_VAL + 1);
		}
	}
	cout << "massiv " << ROWS << "x" << COLS << "\n";
	for (int i = 0; i < ROWS; ++i) {
		for (int j = 0; j < COLS; ++j) {
			cout << arr[i][j] << '\t';
		}
		cout << '\n';
	}
	int counts[MAX_VAL + 1] = { 0 };
	for (int i = 0; i < ROWS; ++i) {
		for (int j = 0; j < COLS; ++j) {
			counts[arr[i][j]]++;
		}
	}
	cout << "\n povtoryayushiesya znachenia\n";
	bool found = false;
	for (int val = 0; val <= MAX_VAL; ++val) {
		if (counts[val] > 1) {
			cout << "Znachenie " << val << " Vstrechaetsya " << counts[val] << " raz; ";
			found = true;
		}
	}
	if (!found) {
		cout << "net povtorov";
	}
	return 0;
}
